#!/usr/bin/env bash 
#Use !/bin/bash -x  for debugging 

readonly SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_PATH=${0:A}
readonly SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

#****************************************************************************
#** Print out usage
#****************************************************************************

function help() {
    local EXITCODE=0

    cat <<- EOF
usage: $SCRIPT_NAME options

Show container versions in GCR using gcloud.

OPTIONS:
    -a --action              [latest] latest is default
    -c --configuration       If not set will revert to gcloud default
    -p --project             If not set will revert to gcloud default    
    -h --help                show this help

Examples:
    Simple usage:
    $SCRIPT_NAME --action=prepare --project=[PROJECT NAME] --debug

    $SCRIPT_NAME --action=encrypt --project=[PROJECT NAME] --configuration=[CONFIGURATION] --input=./decrypted_config/input-file.json --output=./encrypted_config/output-file.json --debug
 
EOF

    return ${EXITCODE}
}

#****************************************************************************
#** check_exitcode
#** $1 is the error code $?
#** $2 is skiponerror 
#****************************************************************************

function check_exitcode() {
        if [[ $1 -gt 0 ]];then
            echo "$3 - exitcode($1)";
            if [[ $2 = false ]];then
                # skiponerror is false so exit
                exit "$1"
            fi
            return "${1}"
        fi
}

#****************************************************************************
#** Check gcloud is available and configured
#****************************************************************************

function check_gcloud() (
    local GCLOUDCONFIGURATION=$1
    local GCPPROJECT=$2
    local EXITCODE=0

    if ! which gcloud> /dev/null; then 
        echo "[Error] Could not find Google Cloud SDK tool 'gcloud'";
        EXITCODE=1
    else
        if [[ -z ${GCLOUDCONFIGURATION} ]];then
            GCLOUDCONFIGURATION=
        fi
        if [[ ! -z ${GCPPROJECT} ]];then
            if ! gcloud ${GCLOUDCONFIGURATION} --format=json projects list | jq ".[].projectId == \"${GCPPROJECT}\"" | grep "true"; then
                echo "[Error] Could not find project '${GCPPROJECT}' in '${GCLOUDCONFIGURATION}'";
                EXITCODE=1
            fi
        fi
    fi

    return ${EXITCODE}
)

#****************************************************************************
#** Main script 
#****************************************************************************

function main() {
    local EXITCODE=0
    local ACTION=""
    local INPUTFILE=""    
    local OUTPUTFILE=""    
    local LINUX=false
    #local GCP_CONFIGURATION=
    #local GCP_PROJECT=

    for i in "$@"
    do
    case $i in
        -a=*|--action=*)
            ACTION="${i#*=}"
            shift 
        ;;    
        --configuration=*)
            GCP_CONFIGURATION="${i#*=}"
            shift 
        ;;     
        --project=*)
            GCP_PROJECT="${i#*=}"
            shift 
        ;;  
        --input=*)
            INPUTFILE="${i#*=}"
            shift 
        ;;  
        --output=*)
            OUTPUTFILE="${i#*=}"
            shift 
        ;;
        --linux)
            LINUX=true
            shift # past argument=value
        ;;                                       
        --debug)
            set -x
            shift 
        ;;
        -h|--help)
            local -r HELP=true            
            shift 
        ;;
        *)
            echo "Unrecognised ${i}"
            shift
        ;;
    esac
    done    

    KEYRINGNAME=deployment
    KEYNAME=config

    BASE64_BACKUP_OPTIONS=""
    BASE64_GET_OPTIONS="-D"
    if [ ${LINUX} = true ]; then
        BASE64_BACKUP_OPTIONS="-w0"
        BASE64_GET_OPTIONS="-d"
    fi
    CONFIGURATION=""
    if [ ! -z "${GCP_CONFIGURATION}" ]; then
        CONFIGURATION="--configuration ${GCP_CONFIGURATION}"
    fi   
    PROJECT=""
    if [ ! -z "${GCP_PROJECT}" ]; then
        PROJECT="--project ${GCP_PROJECT}"
    fi   
    PROJECTCONFIGURATION="${PROJECT} ${CONFIGURATION}"

    if [ "${HELP}" = true ] ; then
        EXITCODE=1
        help
    else
        if [ "${ACTION}" ]; then
            case "${ACTION}" in
                help)
                    help
                ;;
                prepare)
                    if check_gcloud "${CONFIGURATION}" "${GCP_PROJECT}"; then
                        gcloud ${PROJECTCONFIGURATION} kms keyrings create ${KEYRINGNAME} --location global
                        gcloud ${PROJECTCONFIGURATION} kms keys create ${KEYNAME} --location global --keyring ${KEYRINGNAME} --purpose encryption
                    fi
                ;;
                encrypt)
                    if [ -z ${INPUTFILE} ]; then
                        echo "Inputfile not set"
                        exit 1
                    fi
                    if [ -z ${OUTPUTFILE} ]; then
                        echo "Inputfile not set"
                        exit 1
                    fi

                    PLAINTEXT=$(cat "${INPUTFILE}" | base64 ${BASE64_BACKUP_OPTIONS})

                    url="https://cloudkms.googleapis.com/v1/projects/${GCP_PROJECT}/locations/global/keyRings/${KEYRINGNAME}/cryptoKeys/${KEYNAME}:encrypt"

                    # store the whole response with the status at the and
                    http_response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X POST $url \
                            -d "{\"plaintext\":\"$PLAINTEXT\"}" \
                            -H "Authorization:Bearer $(gcloud ${PROJECTCONFIGURATION} auth print-access-token)"\
                    -H "Content-Type: application/json")
                    check_exitcode $? false "Failed to encrypt data using KMS"
                    
                    # extract the body
                    http_body=$(echo "$http_response" | sed -e 's/HTTPSTATUS\:.*//g')

                    # extract the status
                    http_status=$(echo "$http_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

                    # example using the status
                    if [ ! "$http_status" -eq 200  ]; then
                        echo "Error [HTTP status: $http_status]"
                        echo "$http_body"
                        exit 1
                    fi

                    echo "${http_body}" | jq --raw-output ".ciphertext" > "${OUTPUTFILE}"


                ;;
                decrypt)
                    if [ -z ${INPUTFILE} ]; then
                        echo "Inputfile not set"
                        exit 1
                    fi
                    if [ -z ${OUTPUTFILE} ]; then
                        echo "Inputfile not set"
                        exit 1
                    fi

                    url="https://cloudkms.googleapis.com/v1/projects/${GCP_PROJECT}/locations/global/keyRings/${KEYRINGNAME}/cryptoKeys/${KEYNAME}:decrypt"

                    # store the whole response with the status at the and
                    http_response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X POST $url \
                              -d "{\"ciphertext\":\"$(cat ${INPUTFILE})\"}" \
                              -H "Authorization:Bearer $(gcloud ${PROJECTCONFIGURATION} auth print-access-token)"\
                              -H "Content-Type: application/json")
                    check_exitcode $? false "Failed to decrypt key using KMS"
                    
                    # extract the body
                    http_body=$(echo "$http_response" | sed -e 's/HTTPSTATUS\:.*//g')

                    # extract the status
                    http_status=$(echo "$http_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

                    # example using the status
                    if [ ! "$http_status" -eq 200  ]; then
                        echo "Error [HTTP status: $http_status]"
                        echo "$http_body"
                        exit 1
                    fi

                    echo "${http_body}" | jq --raw-output ".plaintext" | base64 ${BASE64_GET_OPTIONS} > "${OUTPUTFILE}"

                ;;
                *)
                    echo "Unrecognised ${ACTION}"; 
                ;;
            esac
        else
            EXITCODE=1
            echo "No action specified use --action=<action>"
        fi
    fi
    return ${EXITCODE}
}

main "$@"